import speech_recognition as sr
import pyttsx3
import webbrowser
import datetime
import os
import subprocess
import threading
import openai
from config import apikey
import random


chatStr = ""

def say(query):
    engine = pyttsx3.init()
    voices = engine.getProperty('voices')
    engine.setProperty('voice', voices[1].id)  # Change to the desired voice if needed
    engine.say(query)
    engine.runAndWait()

def chat(query):
    global chatStr
    print(chatStr)
    openai.api_key = apikey
    chatStr += f"sonali: {query}\n friend: "
    response = openai.Completion.create(
        model="text-davinci-003",
        prompt= chatStr,
        temperature=0.7,
        max_tokens=256,
        top_p=1,
        frequency_penalty=0,
        presence_penalty=0
    )
    # todo: Wrap this inside of a  try catch block
    say(response["choices"][0]["text"])
    chatStr += f"{response['choices'][0]['text']}\n"
    return response["choices"][0]["text"]

def ai(prompt):
    openai.api_key = apikey
    text = f"OpenAI response for Prompt: {prompt} \n *************************\n\n"

    response = openai.ChatCompletion.create(
        model="text-davinci-003",
        prompt=prompt,
        temperature=0.7,
        max_tokens=256,
        top_p=1,
        frequency_penalty=0,
        presence_penalty=0
    )
    # todo: Wrap this inside of a  try catch block
    text += response["choices"][0]["text"]
    if not os.path.exists("Openai"):
        os.mkdir("Openai")

    with open(f"Openai/{''.join(prompt.split('intelligence')[1:]).strip() }.txt", "w") as f:
        f.write(text)

def listen_for_commands():
    while True:
        print("Listening...")
        query = take_command()

        # Process the query here
        listen_thread = threading.Thread(target=listen_for_commands)
        listen_thread.daemon = True
        listen_thread.start()

def take_command():
    r = sr.Recognizer()
    with sr.Microphone() as source:
        r.pause_threshold = 0.5
        audio = r.listen(source)

    try:
        query = r.recognize_google(audio, language="en-in")
        print(f"Sonali said: {query}")
        return query.lower()  # Convert the query to lowercase for case-insensitive matching
    except sr.UnknownValueError:
        print("Please try again.")
        return ""
    except sr.RequestError as e:
        print(f"Error with the speech recognition service; {e}")
        return ""

if __name__ == '__main__':
    print('pycharm')
    say("I am Sonali AI")

    websites = {
        "youtube": "https://www.youtube.com",
        "wikipedia": "https://www.wikipedia.org",
        "google": "https://www.google.com",
        "glassdoor": "https://www.glassdoor.com"
    }

    while True:
        print("Listening...")
        query = take_command()

        for site, url in websites.items():
            if f"open {site}".lower() in query:
                say(f"Opening {site}, ma'am.")
                webbrowser.open(url)

        if "the time" in query:
            current_time = datetime.datetime.now().strftime("%H:%M:%S")
            say(f"Ma'am, the time is {current_time}")

        applications = {
            "power bi": r"C:\Users\Public\Desktop\Power BI Desktop.lnk",
            "notepad": r"C:\Windows\System32\notepad.exe",
            "pycharm": r"C:\Users\prana\Downloads\pycharm-professional-2023.2.1.exe",
        }

        if query.lower() in applications:
            try:
                app_path = applications[query.lower()]
                os.startfile(app_path)
                say(f"Opening {query}, ma'am.")
            except Exception as e:
                print(f"Error opening {query}: {e}")

        elif "Using artificial intelligence".lower() in query.lower():
            ai(prompt=query)

        elif "stop".lower() in query.lower():
            exit()

        elif "reset chat".lower() in query.lower():
            chatStr = ""

        else:
            print("Chatting...")
            chat(query)
